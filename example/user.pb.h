// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef PROTOBUF_INCLUDED_user_2eproto
#define PROTOBUF_INCLUDED_user_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_user_2eproto 

namespace protobuf_user_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_user_2eproto
namespace fixbug {
class loginrequest;
class loginrequestDefaultTypeInternal;
extern loginrequestDefaultTypeInternal _loginrequest_default_instance_;
class loginresponse;
class loginresponseDefaultTypeInternal;
extern loginresponseDefaultTypeInternal _loginresponse_default_instance_;
class registerrequest;
class registerrequestDefaultTypeInternal;
extern registerrequestDefaultTypeInternal _registerrequest_default_instance_;
class registerresponse;
class registerresponseDefaultTypeInternal;
extern registerresponseDefaultTypeInternal _registerresponse_default_instance_;
class resultcode;
class resultcodeDefaultTypeInternal;
extern resultcodeDefaultTypeInternal _resultcode_default_instance_;
}  // namespace fixbug
namespace google {
namespace protobuf {
template<> ::fixbug::loginrequest* Arena::CreateMaybeMessage<::fixbug::loginrequest>(Arena*);
template<> ::fixbug::loginresponse* Arena::CreateMaybeMessage<::fixbug::loginresponse>(Arena*);
template<> ::fixbug::registerrequest* Arena::CreateMaybeMessage<::fixbug::registerrequest>(Arena*);
template<> ::fixbug::registerresponse* Arena::CreateMaybeMessage<::fixbug::registerresponse>(Arena*);
template<> ::fixbug::resultcode* Arena::CreateMaybeMessage<::fixbug::resultcode>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace fixbug {

// ===================================================================

class resultcode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.resultcode) */ {
 public:
  resultcode();
  virtual ~resultcode();

  resultcode(const resultcode& from);

  inline resultcode& operator=(const resultcode& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  resultcode(resultcode&& from) noexcept
    : resultcode() {
    *this = ::std::move(from);
  }

  inline resultcode& operator=(resultcode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const resultcode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const resultcode* internal_default_instance() {
    return reinterpret_cast<const resultcode*>(
               &_resultcode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(resultcode* other);
  friend void swap(resultcode& a, resultcode& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline resultcode* New() const final {
    return CreateMaybeMessage<resultcode>(NULL);
  }

  resultcode* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<resultcode>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const resultcode& from);
  void MergeFrom(const resultcode& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(resultcode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes errmsg = 2;
  void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  const ::std::string& errmsg() const;
  void set_errmsg(const ::std::string& value);
  #if LANG_CXX11
  void set_errmsg(::std::string&& value);
  #endif
  void set_errmsg(const char* value);
  void set_errmsg(const void* value, size_t size);
  ::std::string* mutable_errmsg();
  ::std::string* release_errmsg();
  void set_allocated_errmsg(::std::string* errmsg);

  // int32 errcode = 1;
  void clear_errcode();
  static const int kErrcodeFieldNumber = 1;
  ::google::protobuf::int32 errcode() const;
  void set_errcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fixbug.resultcode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr errmsg_;
  ::google::protobuf::int32 errcode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class loginrequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.loginrequest) */ {
 public:
  loginrequest();
  virtual ~loginrequest();

  loginrequest(const loginrequest& from);

  inline loginrequest& operator=(const loginrequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  loginrequest(loginrequest&& from) noexcept
    : loginrequest() {
    *this = ::std::move(from);
  }

  inline loginrequest& operator=(loginrequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const loginrequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const loginrequest* internal_default_instance() {
    return reinterpret_cast<const loginrequest*>(
               &_loginrequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(loginrequest* other);
  friend void swap(loginrequest& a, loginrequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline loginrequest* New() const final {
    return CreateMaybeMessage<loginrequest>(NULL);
  }

  loginrequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<loginrequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const loginrequest& from);
  void MergeFrom(const loginrequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loginrequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes pwd = 2;
  void clear_pwd();
  static const int kPwdFieldNumber = 2;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // @@protoc_insertion_point(class_scope:fixbug.loginrequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class loginresponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.loginresponse) */ {
 public:
  loginresponse();
  virtual ~loginresponse();

  loginresponse(const loginresponse& from);

  inline loginresponse& operator=(const loginresponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  loginresponse(loginresponse&& from) noexcept
    : loginresponse() {
    *this = ::std::move(from);
  }

  inline loginresponse& operator=(loginresponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const loginresponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const loginresponse* internal_default_instance() {
    return reinterpret_cast<const loginresponse*>(
               &_loginresponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(loginresponse* other);
  friend void swap(loginresponse& a, loginresponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline loginresponse* New() const final {
    return CreateMaybeMessage<loginresponse>(NULL);
  }

  loginresponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<loginresponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const loginresponse& from);
  void MergeFrom(const loginresponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(loginresponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .fixbug.resultcode result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  private:
  const ::fixbug::resultcode& _internal_result() const;
  public:
  const ::fixbug::resultcode& result() const;
  ::fixbug::resultcode* release_result();
  ::fixbug::resultcode* mutable_result();
  void set_allocated_result(::fixbug::resultcode* result);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:fixbug.loginresponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::fixbug::resultcode* result_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class registerrequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.registerrequest) */ {
 public:
  registerrequest();
  virtual ~registerrequest();

  registerrequest(const registerrequest& from);

  inline registerrequest& operator=(const registerrequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  registerrequest(registerrequest&& from) noexcept
    : registerrequest() {
    *this = ::std::move(from);
  }

  inline registerrequest& operator=(registerrequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const registerrequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerrequest* internal_default_instance() {
    return reinterpret_cast<const registerrequest*>(
               &_registerrequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(registerrequest* other);
  friend void swap(registerrequest& a, registerrequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline registerrequest* New() const final {
    return CreateMaybeMessage<registerrequest>(NULL);
  }

  registerrequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<registerrequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const registerrequest& from);
  void MergeFrom(const registerrequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerrequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes pwd = 3;
  void clear_pwd();
  static const int kPwdFieldNumber = 3;
  const ::std::string& pwd() const;
  void set_pwd(const ::std::string& value);
  #if LANG_CXX11
  void set_pwd(::std::string&& value);
  #endif
  void set_pwd(const char* value);
  void set_pwd(const void* value, size_t size);
  ::std::string* mutable_pwd();
  ::std::string* release_pwd();
  void set_allocated_pwd(::std::string* pwd);

  // uint32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:fixbug.registerrequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pwd_;
  ::google::protobuf::uint32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class registerresponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fixbug.registerresponse) */ {
 public:
  registerresponse();
  virtual ~registerresponse();

  registerresponse(const registerresponse& from);

  inline registerresponse& operator=(const registerresponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  registerresponse(registerresponse&& from) noexcept
    : registerresponse() {
    *this = ::std::move(from);
  }

  inline registerresponse& operator=(registerresponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const registerresponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const registerresponse* internal_default_instance() {
    return reinterpret_cast<const registerresponse*>(
               &_registerresponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(registerresponse* other);
  friend void swap(registerresponse& a, registerresponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline registerresponse* New() const final {
    return CreateMaybeMessage<registerresponse>(NULL);
  }

  registerresponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<registerresponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const registerresponse& from);
  void MergeFrom(const registerresponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(registerresponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .fixbug.resultcode result = 1;
  bool has_result() const;
  void clear_result();
  static const int kResultFieldNumber = 1;
  private:
  const ::fixbug::resultcode& _internal_result() const;
  public:
  const ::fixbug::resultcode& result() const;
  ::fixbug::resultcode* release_result();
  ::fixbug::resultcode* mutable_result();
  void set_allocated_result(::fixbug::resultcode* result);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:fixbug.registerresponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::fixbug::resultcode* result_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_user_2eproto::TableStruct;
};
// ===================================================================

class UserServiceRpc_Stub;

class UserServiceRpc : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserServiceRpc() {};
 public:
  virtual ~UserServiceRpc();

  typedef UserServiceRpc_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void Login(::google::protobuf::RpcController* controller,
                       const ::fixbug::loginrequest* request,
                       ::fixbug::loginresponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Register(::google::protobuf::RpcController* controller,
                       const ::fixbug::registerrequest* request,
                       ::fixbug::registerresponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc);
};

class UserServiceRpc_Stub : public UserServiceRpc {
 public:
  UserServiceRpc_Stub(::google::protobuf::RpcChannel* channel);
  UserServiceRpc_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~UserServiceRpc_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements UserServiceRpc ------------------------------------------

  void Login(::google::protobuf::RpcController* controller,
                       const ::fixbug::loginrequest* request,
                       ::fixbug::loginresponse* response,
                       ::google::protobuf::Closure* done);
  void Register(::google::protobuf::RpcController* controller,
                       const ::fixbug::registerrequest* request,
                       ::fixbug::registerresponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserServiceRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// resultcode

// int32 errcode = 1;
inline void resultcode::clear_errcode() {
  errcode_ = 0;
}
inline ::google::protobuf::int32 resultcode::errcode() const {
  // @@protoc_insertion_point(field_get:fixbug.resultcode.errcode)
  return errcode_;
}
inline void resultcode::set_errcode(::google::protobuf::int32 value) {
  
  errcode_ = value;
  // @@protoc_insertion_point(field_set:fixbug.resultcode.errcode)
}

// bytes errmsg = 2;
inline void resultcode::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& resultcode::errmsg() const {
  // @@protoc_insertion_point(field_get:fixbug.resultcode.errmsg)
  return errmsg_.GetNoArena();
}
inline void resultcode::set_errmsg(const ::std::string& value) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.resultcode.errmsg)
}
#if LANG_CXX11
inline void resultcode::set_errmsg(::std::string&& value) {
  
  errmsg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.resultcode.errmsg)
}
#endif
inline void resultcode::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.resultcode.errmsg)
}
inline void resultcode::set_errmsg(const void* value, size_t size) {
  
  errmsg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.resultcode.errmsg)
}
inline ::std::string* resultcode::mutable_errmsg() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.resultcode.errmsg)
  return errmsg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* resultcode::release_errmsg() {
  // @@protoc_insertion_point(field_release:fixbug.resultcode.errmsg)
  
  return errmsg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void resultcode::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg != NULL) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:fixbug.resultcode.errmsg)
}

// -------------------------------------------------------------------

// loginrequest

// bytes name = 1;
inline void loginrequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& loginrequest::name() const {
  // @@protoc_insertion_point(field_get:fixbug.loginrequest.name)
  return name_.GetNoArena();
}
inline void loginrequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.loginrequest.name)
}
#if LANG_CXX11
inline void loginrequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.loginrequest.name)
}
#endif
inline void loginrequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.loginrequest.name)
}
inline void loginrequest::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.loginrequest.name)
}
inline ::std::string* loginrequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.loginrequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* loginrequest::release_name() {
  // @@protoc_insertion_point(field_release:fixbug.loginrequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void loginrequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fixbug.loginrequest.name)
}

// bytes pwd = 2;
inline void loginrequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& loginrequest::pwd() const {
  // @@protoc_insertion_point(field_get:fixbug.loginrequest.pwd)
  return pwd_.GetNoArena();
}
inline void loginrequest::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.loginrequest.pwd)
}
#if LANG_CXX11
inline void loginrequest::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.loginrequest.pwd)
}
#endif
inline void loginrequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.loginrequest.pwd)
}
inline void loginrequest::set_pwd(const void* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.loginrequest.pwd)
}
inline ::std::string* loginrequest::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.loginrequest.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* loginrequest::release_pwd() {
  // @@protoc_insertion_point(field_release:fixbug.loginrequest.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void loginrequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:fixbug.loginrequest.pwd)
}

// -------------------------------------------------------------------

// loginresponse

// .fixbug.resultcode result = 1;
inline bool loginresponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void loginresponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::fixbug::resultcode& loginresponse::_internal_result() const {
  return *result_;
}
inline const ::fixbug::resultcode& loginresponse::result() const {
  const ::fixbug::resultcode* p = result_;
  // @@protoc_insertion_point(field_get:fixbug.loginresponse.result)
  return p != NULL ? *p : *reinterpret_cast<const ::fixbug::resultcode*>(
      &::fixbug::_resultcode_default_instance_);
}
inline ::fixbug::resultcode* loginresponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.loginresponse.result)
  
  ::fixbug::resultcode* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::fixbug::resultcode* loginresponse::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::fixbug::resultcode>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fixbug.loginresponse.result)
  return result_;
}
inline void loginresponse::set_allocated_result(::fixbug::resultcode* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.loginresponse.result)
}

// bool success = 2;
inline void loginresponse::clear_success() {
  success_ = false;
}
inline bool loginresponse::success() const {
  // @@protoc_insertion_point(field_get:fixbug.loginresponse.success)
  return success_;
}
inline void loginresponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:fixbug.loginresponse.success)
}

// -------------------------------------------------------------------

// registerrequest

// uint32 id = 1;
inline void registerrequest::clear_id() {
  id_ = 0u;
}
inline ::google::protobuf::uint32 registerrequest::id() const {
  // @@protoc_insertion_point(field_get:fixbug.registerrequest.id)
  return id_;
}
inline void registerrequest::set_id(::google::protobuf::uint32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:fixbug.registerrequest.id)
}

// bytes name = 2;
inline void registerrequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& registerrequest::name() const {
  // @@protoc_insertion_point(field_get:fixbug.registerrequest.name)
  return name_.GetNoArena();
}
inline void registerrequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.registerrequest.name)
}
#if LANG_CXX11
inline void registerrequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.registerrequest.name)
}
#endif
inline void registerrequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.registerrequest.name)
}
inline void registerrequest::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.registerrequest.name)
}
inline ::std::string* registerrequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.registerrequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registerrequest::release_name() {
  // @@protoc_insertion_point(field_release:fixbug.registerrequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registerrequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:fixbug.registerrequest.name)
}

// bytes pwd = 3;
inline void registerrequest::clear_pwd() {
  pwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& registerrequest::pwd() const {
  // @@protoc_insertion_point(field_get:fixbug.registerrequest.pwd)
  return pwd_.GetNoArena();
}
inline void registerrequest::set_pwd(const ::std::string& value) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fixbug.registerrequest.pwd)
}
#if LANG_CXX11
inline void registerrequest::set_pwd(::std::string&& value) {
  
  pwd_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fixbug.registerrequest.pwd)
}
#endif
inline void registerrequest::set_pwd(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fixbug.registerrequest.pwd)
}
inline void registerrequest::set_pwd(const void* value, size_t size) {
  
  pwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fixbug.registerrequest.pwd)
}
inline ::std::string* registerrequest::mutable_pwd() {
  
  // @@protoc_insertion_point(field_mutable:fixbug.registerrequest.pwd)
  return pwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* registerrequest::release_pwd() {
  // @@protoc_insertion_point(field_release:fixbug.registerrequest.pwd)
  
  return pwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void registerrequest::set_allocated_pwd(::std::string* pwd) {
  if (pwd != NULL) {
    
  } else {
    
  }
  pwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pwd);
  // @@protoc_insertion_point(field_set_allocated:fixbug.registerrequest.pwd)
}

// -------------------------------------------------------------------

// registerresponse

// .fixbug.resultcode result = 1;
inline bool registerresponse::has_result() const {
  return this != internal_default_instance() && result_ != NULL;
}
inline void registerresponse::clear_result() {
  if (GetArenaNoVirtual() == NULL && result_ != NULL) {
    delete result_;
  }
  result_ = NULL;
}
inline const ::fixbug::resultcode& registerresponse::_internal_result() const {
  return *result_;
}
inline const ::fixbug::resultcode& registerresponse::result() const {
  const ::fixbug::resultcode* p = result_;
  // @@protoc_insertion_point(field_get:fixbug.registerresponse.result)
  return p != NULL ? *p : *reinterpret_cast<const ::fixbug::resultcode*>(
      &::fixbug::_resultcode_default_instance_);
}
inline ::fixbug::resultcode* registerresponse::release_result() {
  // @@protoc_insertion_point(field_release:fixbug.registerresponse.result)
  
  ::fixbug::resultcode* temp = result_;
  result_ = NULL;
  return temp;
}
inline ::fixbug::resultcode* registerresponse::mutable_result() {
  
  if (result_ == NULL) {
    auto* p = CreateMaybeMessage<::fixbug::resultcode>(GetArenaNoVirtual());
    result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:fixbug.registerresponse.result)
  return result_;
}
inline void registerresponse::set_allocated_result(::fixbug::resultcode* result) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete result_;
  }
  if (result) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      result = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:fixbug.registerresponse.result)
}

// bool success = 2;
inline void registerresponse::clear_success() {
  success_ = false;
}
inline bool registerresponse::success() const {
  // @@protoc_insertion_point(field_get:fixbug.registerresponse.success)
  return success_;
}
inline void registerresponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:fixbug.registerresponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fixbug

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_user_2eproto
